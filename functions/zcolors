#!/bin/zsh
emulate -L zsh; setopt extendedglob rcquotes warncreateglobal
local -a match=() mbegin=() mend=()
local MATCH= MBEGIN= MEND=

if [[ ! -v color ]]; then
  autoload -Uz colors
  colors
fi

# Add bright versions of foreground and background colors to $color.
() {
  local -i i=
  local name= code=
  for (( i = 0; i <= 7; i++ )); do
    name=$color[$(( i + 30 ))]
    for code name in $(( i + 90 )) "bright$name" $(( i + 100 )) "bg-bright$name"; do
      color[$code]="$name"
      color[$name]="$code"
    done
  done
  color[03]=italic
  color[italic]=03
  color[dim]=$color[faint]
}

typeset -p color

export -UT LS_COLORS=$1 ls_colors

local -A ls_defaults=(
    'no'  "$color[none];$color[default];$color[normal]"
    'fi'  "$color[none];$color[default];$color[normal]"
    'mi'  "$color[none];$color[default];$color[dim]"
    'or'  "$color[none];$color[red]"
    'ex'  "$color[none];$color[brightgreen]"
    'sg'  "$color[none];$color[brightyellow]"
    'su'  "$color[none];$color[brightred]"
    'di'  "$color[none];$color[brightblue]"
    'st'  "$color[none];$color[blue]"
    'tw'  "$color[none];$color[bg-blue];$color[white]"
    'ow'  "$color[none];$color[bg-blue];$color[brightwhite]"
    'ln'  "$color[none];$color[cyan]"
    'so'  "$color[none];$color[magenta]"
    'pi'  "$color[none];$color[yellow]"
    'cd'  "$color[none];$color[yellow];$color[bold]"
    'bd'  "$color[none];$color[bg-brightyellow];$color[black]"
)
ls_defaults+=(
    '*.DS_Store'  "$ls_defaults[mi]"
    '*.zwc'       "$ls_defaults[mi]"
)
() {
  local k= v=
  for k v in "${(kv@)ls_defaults}"; do
    if [[ -z $ls_colors[(r)$k=*] ]]; then
      ls_colors+=( "$k=$v" )
    fi
  done
}

typeset -gA zcolor=()
() {
  local entry= key= value=

  for entry in ${ls_colors[@]:/ln=target/$ls_defaults[ln]}; do
    key=${${(M)entry#*=}%=}
    value=${entry#$key=}

    # Replace complex color codes with simple ones.
    # Order here matters. Otherwise, ...;<0-7> can eat the first char of 38;.. or 48;...
    value=${value//(#b)'38;5;'(<8-15>)/$(( 82 + ${match[@][1]} ))}
    value=${value//(#b)'38;5;'(<0-7>)/$(( 30 + ${match[@][1]} ))}
    value=${value//(#b)'48;5;'(<8-15>)/$(( 92 + ${match[@][1]} ))}
    value=${value//(#b)'48;5;'(<0-7>)/$(( 40 + ${match[@][1]} ))}

    zcolor[$key]=$value
  done
}
typeset -p zcolor

if [[ $OSTYPE != linux-gnu ]]; then
  export LSCOLORS=  # The BSD version does not have an underscore.
  () {
    local -i num= bold= reverse= upper=65 lower=97
    local type= fg= bg=
    for type in di ln so pi ex bd cd su sg tw ow; do
      fg=x bg=x bold=0 reverse=0
      for num in ${(s:;:)zcolor[$type]}; do
        case $num in
          ( <1-1> )         bold=1                ;;
          ( <3-9> )         reverse=1             ;;
          ( <30-37> )       fg=${(#):-lower+num%10} ;;
          ( <40-47> )       bg=${(#):-lower+num%10} ;;
          ( <90-97> )       fg=${(#):-upper+num%10} ;;
          ( <100-107> )     bg=${(#):-upper+num%10} ;;
        esac
      done

      if (( reverse )); then
        for fg bg in "$bg" "$fg"; do done  # Swap FG and BG.
      fi

      if [[ bold -eq 1 && fg != x ]]; then
        fg=${(U)fg}  # Convert bold to bright FG.
      fi

      LSCOLORS+=$fg${(L)bg}
    done
  }
  typeset -p LSCOLORS
fi

typeset -gA ZSH_HIGHLIGHT_STYLES=()
local -A syntax_colors=(
    default       no
    comment       mi
    unknown-token or

    arg0                    ex
    builtins                ex
    suffix-alias            sg
    single-hyphen-option    sg
    double-hyphen-option    sg
    single-quoted-argument  sg
    double-quoted-argument  sg
    dollar-quoted-argument  sg
    precommand              su
    reserved-word           su

    path_prefix               st
    path_prefix_pathseparator mi
    path                      di
    path_pathseparator        no
    globbing                  tw
    autodirectory             ow

    global-alias                  ln
    rc-quote                      ln
    dollar-double-quoted-argument ln
    assign                        ln
    back-double-quoted-argument   ln
    back-dollar-quoted-argument   ln
    history-expansion             ln

    back-quoted-argument-delimiter  so
    command-substitution-delimiter  so
    process-substitution-delimiter  so

    back-quoted-argument  no
    command-substitution  no
    process-substitution  no

    redirection       pi
    commandseparator  pi
    numeric-fd        cd
    named-fd          cd

    bracket-error   or
    bracket-level-1 so
    bracket-level-2 so
    bracket-level-3 so
    bracket-level-4 so
    bracket-level-5 so
    cursor-matchingbracket bd
)

() {
  local -aU spec=()
  local -i num=
  local token= type= fg= bg= bold= underline=
  for token type in "${(kv@)syntax_colors}"; do
    fg= bg= bold= underline=
    for num in ${(s.;.)zcolor[$type]}; do
      case $num in
        ( <1-1> )     bold=bold               ;;
        ( <3-9> )     underline=underline     ;;
        ( <39-39> )   fg=default              ;;
        ( <49-49> )   bg=default              ;;
        ( <30-37> )   fg=$(( num - 30 ))      ;;
        ( <40-47> )   bg=$(( num - 40 ))      ;;
        ( <90-97> )   fg=$(( num - 90 + 8 ))  ;;
        ( <100-107> ) bg=$(( num - 100 + 8 )) ;;
      esac
    done
    spec=( ${fg:+fg=$fg} ${bg:+bg=$bg} $bold $underline )
    ZSH_HIGHLIGHT_STYLES[$token]="${(j:,:)spec}"
    [[ -z ZSH_HIGHLIGHT_STYLES[$token] ]] &&
        ZSH_HIGHLIGHT_STYLES[$token]=none
  done
}
typeset -p ZSH_HIGHLIGHT_STYLES

() {
  local -A comp_colors=(
      'aliases|builtins|executables|functions|commands'
                        $syntax_colors[arg0]
      'suffix-aliases'  $syntax_colors[suffix-alias]
      'options'         $syntax_colors[single-hyphen-option]
      'reserved-words'  $syntax_colors[reserved-word]

      'named-directories' $syntax_colors[path]
      'glob(flags|quals)' $syntax_colors[globbing]

      'global-aliases|modifiers|parameters'
                          $syntax_colors[global-alias]
      'file-descriptors'  $syntax_colors[numeric-fd]

      '*local*~*director*'        di
      '*(branch|head)*~*remote*'  di
      '*remote*~*(branch|head)*'  ln
      '*commit*~*-tag'            pi
      '*-tag*~*commit*'           so
  )

  local -aU zls_colors=(
      "(events)=(|-)<->(#b)(*)=$zcolor[no]=$zcolor[mi]"
      "(history-lines)=[[:space:]]#(#b)(<->) *=$zcolor[no]=$zcolor[mi]"
  )
  local comp= entry=
  for comp entry in ${(kv@)comp_colors}; do
    zls_colors+=(
        "($comp)=(#b)(*[^ ]~*  *|)[ ]#(*)=$zcolor[no]=$zcolor[$entry]=$zcolor[mi]"
    )
  done

  zls_colors+=(
      "(*~*(directories|files|expansions))=(*[^ ]~*  *|)[ ]#(#b)(*)=$zcolor[no]=$zcolor[mi]"
      "${${(k@)zcolor}[@]:/(#m)*/$MATCH=$zcolor[$MATCH]}"
      "tc=$zcolor[$syntax_colors[path_pathseparator]]"
      "sp=$zcolor[no]"
      "sa=$zcolor[$syntax_colors[suffix-alias]]"
      "ma=$color[brightwhite];$color[bg-blue]"
  )

  print-style() {
    zstyle "$@"
    [[ $1 == -e ]] &&
        shift
    zstyle -L $1 $2
  }
  print-style ':completion:*:default' list-colors "$zls_colors[@]"
  print-style ':completion:*' group-name ''
  print-style ':completion:*' list-separator ' '
  unfunction print-style
}

typeset -p LS_COLORS


# Workaround for "error: could not lock config file: File exists".
if [[ -f $XDG_CONFIG_HOME/git/config.lock || -f ~/.gitconfig.lock ]]; then
  return
fi


() {
  local -A git_colors=(
      branch.current        "$zcolor[ow]"
      branch.local          "$zcolor[di]"
      branch.upstream       "$zcolor[ln]"
      branch.remote         "$zcolor[ln]"
      branch.plain          "$zcolor[no]"

      decorate.HEAD         "$zcolor[ow]"
      decorate.branch       "$zcolor[di]"
      decorate.remotebranch "$zcolor[ln]"
      decorate.tag          "$zcolor[so]"
      decorate.grafted      "$zcolor[or]"
      decorate.stash        "$zcolor[mi]"

      diff.commit                     "$zcolor[pi]"
      diff.meta                       "$zcolor[mi]"
      diff.frag                       "$zcolor[mi]"
      diff.func                       "$zcolor[mi]"
      diff.context                    "$zcolor[no]"
      diff.contextDimmed              "$zcolor[no];$color[dim]"
      diff.contextBold                "$zcolor[no];$color[bold]"
      diff.new                        "$color[bg-green];$color[brightwhite]"
      diff.newDimmed                  "$color[bg-green];$color[brightwhite];$color[dim]"
      diff.newBold                    "$color[bg-green];$color[brightwhite];$color[bold]"
      diff.newMoved                   "$color[bg-blue];$color[brightwhite]"
      diff.newMovedDimmed             "$color[bg-blue];$color[brightwhite];$color[dim]"
      diff.newMovedAlternative        "$color[bg-magenta];$color[brightwhite]"
      diff.newMovedAlternativeDimmed  "$color[bg-magenta];$color[brightwhite];$color[dim]"
      diff.old                        "$color[bg-red];$color[white]"
      diff.oldDimmed                  "$color[bg-red];$color[white];$color[dim]"
      diff.oldBold                    "$color[bg-red];$color[white];$color[bold]"
      diff.oldMoved                   "$color[bg-blue];$color[white]"
      diff.oldMovedDimmed             "$color[bg-blue];$color[white];$color[dim]"
      diff.oldMovedAlternative        "$color[bg-magenta];$color[white]"
      diff.oldMovedAlternativeDimmed  "$color[bg-magenta];$color[white];$color[dim]"
      diff.whitespace                 "$color[bg-brightred]"

      # grep.column
      # grep.context
      # grep.filename
      # grep.function
      # grep.linenumber
      # grep.matchContext
      # grep.matchSelected
      # grep.selected
      # grep.separator

      interactive.header  "$zcolor[mi];$color[bold]"
      interactive.prompt  "$zcolor[ow]"
      interactive.help    "$zcolor[mi]"
      interactive.error   "$zcolor[su]"

      remote.error    "$zcolor[su]"
      remote.warning  "$zcolor[sg]"
      remote.success  "$zcolor[ex]"
      remote.hint     "$zcolor[mi]"

      status.header       "$zcolor[no]"
      status.branch       "$zcolor[di]"
      status.localbranch  "$zcolor[di]"
      status.remotebranch "$zcolor[ln]"
      status.nobranch     "$zcolor[or]"
      status.added        "$zcolor[ex]"
      status.updated      "$zcolor[ex]"
      status.changed      "$zcolor[sg]"
      status.unmerged     "$zcolor[su]"
      status.untracked    "$zcolor[mi]"
  )
  local -aU spec=()
  local -i num=
  local slot= entry= fg= bg=
  for slot entry in "${(kv@)git_colors}"; do
    spec=() fg= bg=
    for num in ${(s.;.)entry}; do
      case $num in
        ( <1-1> )     spec+=( bold )          ;;
        ( <2-2> )     spec+=( dim )           ;;
        ( <3-3> )     spec+=( italic )        ;;
        ( <4-4> )     spec+=( ul )            ;;
        ( <5-5> )     spec+=( blink )         ;;
        ( <7-7> )     spec+=( reverse )       ;;
        ( <9-9> )     spec+=( strike )        ;;
        ( <30-37> )   fg=$(( num - 30 ))      ;;
        ( <40-47> )   bg=$(( num - 40 ))      ;;
        ( <90-97> )   fg=$(( num - 90 + 8 ))  ;;
        ( <100-107> ) bg=$(( num - 100 + 8 )) ;;
      esac
    done
    spec=( "${fg:-normal}" "${bg:-normal}" $spec[@] )
    if (( $#spec[@] )); then
      git config --global "color.$slot" "$spec"
    else
      git config --global --unset "color.$slot"
    fi
  done
  git config --global diff.colorMoved zebra
}
